import {
  $e,
  $n,
  $t,
  An,
  At,
  B,
  Bn,
  C,
  Ce,
  Cn,
  Ct,
  De,
  Dn,
  Dt,
  Ee,
  F,
  Fn,
  G,
  Gn,
  H,
  Hn,
  Ht,
  Ie,
  In,
  Je,
  Jn,
  K,
  Ke,
  Kt,
  L,
  Le,
  Ln,
  Lt,
  M,
  Me,
  Mt,
  N,
  Ne,
  Nn,
  O,
  On,
  Ot,
  Pe,
  Pn,
  Pt,
  Q,
  Qe,
  Qn,
  R,
  Rn,
  Rt,
  S,
  Se,
  Sn,
  T,
  Tt,
  U,
  Ue,
  Un,
  Ut,
  V,
  Ve,
  Vt,
  We,
  Wn,
  X,
  Xe,
  Xn,
  Y,
  Ye,
  Yn,
  Z,
  Ze,
  Zn,
  _,
  _e,
  _n,
  _t,
  b,
  be,
  bn,
  bt,
  cn,
  ct,
  ee,
  en,
  et,
  f,
  ft,
  ge,
  gn,
  he,
  it,
  j,
  je,
  jn,
  jt,
  k,
  ke,
  kn,
  kt,
  m,
  me,
  ne,
  nn,
  nt,
  oe,
  on,
  ot,
  pt,
  qe,
  qn,
  re,
  rn,
  rt,
  se,
  sn,
  st,
  te,
  tn,
  tt,
  ve,
  we,
  wn,
  wt,
  x,
  xe,
  xn,
  ye,
  z,
  ze,
  zn
} from "./chunk-6V4X4E46.js";
import "./chunk-JZQ37OGZ.js";
export {
  G as BASE10,
  f as BASE16,
  K as BASE64,
  kn as COLON,
  Z as DEFAULT_DEPTH,
  L as EMPTY_SPACE,
  _ as ENV_MAP,
  Ln as ONE_THOUSAND,
  Ue as REACT_NATIVE_PRODUCT,
  xe as RELAYER_DEFAULT_PROTOCOL,
  we as SDK_TYPE,
  _e as SLASH,
  Y as TYPE_0,
  U as TYPE_1,
  k as UTF8,
  $e as appendToQueryString,
  zn as assertType,
  Ot as buildApprovedNamespaces,
  rt as calcExpiry,
  Qn as capitalize,
  Le as capitalizeWord,
  Zn as createDelayedPromise,
  Xn as createExpiringPromise,
  j as decodeTypeByte,
  Cn as decrypt,
  Un as deriveSymKey,
  Q as deserialize,
  Se as encodeTypeByte,
  jn as encrypt,
  st as engineEvent,
  Jn as enumify,
  Ee as formatAccountId,
  gn as formatAccountWithChain,
  ye as formatChainId,
  ne as formatExpirerTarget,
  nt as formatIdTarget,
  Pn as formatMessage,
  Bn as formatMessageContext,
  ze as formatRelayParams,
  Hn as formatRelayRpcUrl,
  et as formatTopicTarget,
  Me as formatUA,
  pt as formatUri,
  Rn as generateKeyPair,
  An as generateRandomBytes32,
  T as getAccountsChains,
  bn as getAccountsFromNamespaces,
  he as getAddressFromAccount,
  Nn as getAddressesFromAccounts,
  xn as getAppMetadata,
  ve as getChainFromAccount,
  ge as getChainsFromAccounts,
  V as getChainsFromNamespace,
  On as getChainsFromNamespaces,
  Sn as getChainsFromRequiredNamespaces,
  be as getDidAddress,
  M as getDidAddressSegments,
  Ne as getDidChainId,
  ee as getEnvironment,
  qn as getHttpUrl,
  N as getInternalError,
  Ve as getJavascriptID,
  De as getJavascriptOS,
  ke as getLastItems,
  In as getNamespacedDidChainId,
  Ye as getNamespacesChains,
  Je as getNamespacesEventsForChainId,
  We as getNamespacesMethodsForChainId,
  Fn as getRelayClientMetadata,
  ct as getRelayProtocolApi,
  it as getRelayProtocolName,
  bt as getRequiredNamespacesFromNamespaces,
  R as getSdkError,
  B as getUniqueValues,
  b as hasOverlap,
  _n as hashKey,
  wn as hashMessage,
  Ce as isBrowser,
  te as isCaipNamespace,
  cn as isConformingNamespaces,
  ot as isExpired,
  X as isNode,
  Rt as isProposalStruct,
  je as isReactNative,
  Pt as isSessionCompatible,
  At as isSessionStruct,
  Dn as isTypeOneEnvelope,
  S as isUndefined,
  Ze as isValidAccountId,
  nn as isValidAccounts,
  rn as isValidActions,
  C as isValidArray,
  H as isValidChainId,
  Xe as isValidChains,
  Ut as isValidController,
  $t as isValidErrorReason,
  Mt as isValidEvent,
  jt as isValidId,
  tn as isValidNamespaceAccounts,
  se as isValidNamespaceActions,
  en as isValidNamespaceChains,
  oe as isValidNamespaceMethodsOrEvents,
  on as isValidNamespaces,
  Kt as isValidNamespacesChainId,
  Lt as isValidNamespacesEvent,
  kt as isValidNamespacesRequest,
  F as isValidNumber,
  x as isValidObject,
  Ct as isValidParams,
  sn as isValidRelay,
  wt as isValidRelays,
  Dt as isValidRequest,
  Ht as isValidRequestExpiry,
  _t as isValidRequiredNamespaces,
  Vt as isValidResponse,
  m as isValidString,
  Tt as isValidUrl,
  Wn as mapEntries,
  Gn as mapToObj,
  O as mergeArrays,
  re as normalizeNamespaces,
  Yn as objToMap,
  z as parseAccountId,
  me as parseChainId,
  Ke as parseContextNames,
  tt as parseExpirerTarget,
  Qe as parseNamespaceKey,
  qe as parseRelayParams,
  ft as parseUri,
  Ie as serialize,
  $n as validateDecoding,
  Pe as validateEncoding
};
//# sourceMappingURL=@walletconnect_utils.js.map
